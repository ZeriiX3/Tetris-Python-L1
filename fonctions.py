''' BLOCS '''

Bloc_list = [[[1, 0],  # Blocs communs
              [1, 1]
              ],
             [[0, 1],
              [1, 1]
              ],
             [[1, 0, 0],
              [1, 1, 1]
              ],
             [[1, 1],
              [0, 1],
              [0, 1]
              ],
             [[1, 0],
              [1, 1],
              [1, 0]
              ],
             [[0, 1, 0],
              [1, 1, 1]
              ],
             [[1, 1, 0],
              [0, 1, 1]
              ],
             [[1, 0],
              [1, 1],
              [0, 1]
              ],
             [[1],
              [1],
              [1],
              [1]
              ],
             [[1, 1],
              [1, 1]
              ],
             [[1, 1],
              [0, 1]
              ],
             [[1, 1],
              [1, 0]
              ],
             [[0, 0, 1],
              [1, 1, 1]
              ],
             [[1, 0],
              [1, 0],
              [1, 1]
              ],
             [[0, 1],
              [1, 1],
              [0, 1]
              ],
             [[1, 1, 1],
              [0, 1, 0]
              ],
             [[0, 1, 1],
              [1, 1, 0]
              ],
             [[0, 1],
              [1, 1],
              [1, 0]
              ],
             [[1, 1, 1, 1]
              ],
             [[1]
              ],

             [[1, 1, 1, 1],  # Blocs Cercle
              [1, 1, 1, 1],
              [1, 1, 1, 1],
              [1, 1, 1, 1]
              ],
             [[0, 1, 1, 0],
              [1, 1, 1, 1],
              [1, 1, 1, 1],
              [0, 1, 1, 0]
              ],
             [[1, 0, 0, 1],
              [1, 0, 0, 1],
              [1, 0, 0, 1],
              [1, 1, 1, 1]
              ],
             [[1, 1, 1, 1],
              [0, 0, 0, 1],
              [0, 0, 0, 1],
              [0, 0, 0, 1]
              ],
             [[1, 1, 1, 1],
              [1, 1, 1, 0]
              ],
             [[1, 1, 1],
              [0, 0, 1],
              [0, 0, 1],
              [1, 1, 1]
              ],
             [[1, 1],
              [1, 1],
              [1, 1],
              [1, 1]
              ],
             [[1, 1, 1, 1],
              [1, 1, 1, 1]
              ],
             [[1],
              [1],
              [1],
              [1],
              [1]
              ],
             [[1, 1, 1, 1, 1],
              [1, 0, 0, 0, 1]
              ],
             [[1, 1, 1, 1, 1]
              ],
             [[1, 0, 0, 0],
              [1, 0, 0, 0],
              [1, 0, 0, 1],
              [1, 1, 1, 1]
              ],

             [[0, 0, 1, 1],  # Blocs losange
              [0, 1, 1, 0],
              [1, 1, 0, 0],
              [1, 0, 0, 0]
              ],
             [[1, 1, 0, 0],
              [0, 1, 1, 0],
              [0, 0, 1, 1],
              [0, 0, 0, 1]
              ],
             [[1, 1, 1, 1],
              [0, 1, 1, 0],
              [0, 1, 1, 0],
              [0, 1, 1, 0]
              ],
             [[1, 0, 0, 1],
              [0, 1, 1, 0],
              [0, 1, 1, 0],
              [1, 0, 0, 1]
              ],
             [[1, 1, 1, 1, 1],
              [0, 1, 1, 1, 0],
              [0, 0, 1, 0, 0]
              ],
             [[1, 1, 1, 1],
              [1, 1, 1, 1],
              [1, 1, 1, 1],
              [1, 1, 1, 1]
              ],
             [[1, 0, 0, 0],
              [1, 1, 0, 0],
              [0, 1, 1, 0],
              [0, 0, 1, 1]
              ],
             [[0, 0, 0, 1],
              [0, 0, 1, 1],
              [0, 1, 1, 0],
              [1, 1, 0, 0]
              ],
             [[1],
              [1],
              [1],
              [1],
              [1]
              ],
             [[0, 0, 0, 1],
              [1, 1, 1, 1],
              [0, 0, 0, 1]
              ],
             [[1, 1, 1, 1, 1],
              ],
             [[1, 1, 1, 1],
              [0, 0, 0, 1]
              ],
             [[1, 1],
              [0, 1],
              [0, 1],
              [0, 1]
              ],
             [[1, 0],
              [1, 0],
              [1, 0],
              [1, 1]
              ],

             [[1, 0, 0],  # Blocs Triangle
              [1, 1, 1],
              [0, 0, 1],
              ],
             [[1, 1, 0],
              [0, 1, 0],
              [0, 1, 1],
              ],
             [[0, 0, 1],
              [1, 1, 1],
              [1, 0, 0],
              ],
             [[0, 1, 1],
              [0, 1, 0],
              [1, 1, 0],
              ],
             [[0, 0, 1],
              [0, 1, 0],
              [1, 0, 0]
              ],
             [[1, 0, 0],
              [0, 1, 0],
              [0, 0, 1]
              ],
             [[1],
              [1],
              [1]
              ],
             [[1, 1, 1]
              ],
             [[1],
              [1]
              ],
             [[0, 1, 0],
              [1, 1, 1],
              [0, 1, 0]
              ],
             [[1, 1]
              ]

             ]


# APPLICATION

def grid_creation_triangle(n):   # Cr√©ation du plateau TRIANGLE
    grid_triangle=[]
    for i in range(n):
        k=[]
        for j in range(n):
            k.append(0)
        grid_triangle.append(k)
    mid=len(grid_triangle)//2
    for i in range(n//2+1):
        grid_triangle[i][mid]=1
        for k in range (i+1):
            grid_triangle[i][mid-k]=1
            grid_triangle[i][mid+k]=1
    del grid_triangle[mid+1:]

    return grid_triangle


def grid_stock(grid_triangle):
    f_triangle = open("triangle.txt","w")
    for i in grid_triangle:
        for j in i:
            f_triangle.write(str(j))
            f_triangle.write(" ")
        f_triangle.write("\n")
    f_triangle.close()


def read_grid(path):
    grid = []
    if path == 1:
        with open("triangle.txt","r") as f_t:
            cont = f_t.readlines()
            for l in cont:
                grid.append(l)
    return grid

"""
    elif path == 2:
        return grid_losange
    elif path == 3:
        return grid_cercle
"""




